4 stack using two queues such that the push operation runs in 
ùëÇ
(
1
)
O(1) time and the pop operation


#include <stdio.h>
#include <stdlib.h>

// Define the structure for a queue node
struct QueueNode {
    int data;
    struct QueueNode* next;
};

// Define the structure for a queue
struct Queue {
    struct QueueNode *front, *rear;
};

// Function to create a new queue node
struct QueueNode* createQueueNode(int data) {
    struct QueueNode* newNode = (struct QueueNode*)malloc(sizeof(struct QueueNode));
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}

// Function to create a new queue
struct Queue* createQueue() {
    struct Queue* q = (struct Queue*)malloc(sizeof(struct Queue));
    q->front = q->rear = NULL;
    return q;
}

// Function to enqueue an element to the queue
void enqueue(struct Queue* q, int data) {
    struct QueueNode* newNode = createQueueNode(data);
    if (q->rear == NULL) {
        q->front = q->rear = newNode;
        return;
    }
    q->rear->next = newNode;
    q->rear = newNode;
}

// Function to dequeue an element from the queue
int dequeue(struct Queue* q) {
    if (q->front == NULL) {
        printf("Queue underflow!\n");
        return -1;
    }
    struct QueueNode* temp = q->front;
    int data = temp->data;
    q->front = q->front->next;

    if (q->front == NULL) {
        q->rear = NULL;
    }

    free(temp);
    return data;
}

// Function to check if a queue is empty
int isQueueEmpty(struct Queue* q) {
    return q->front == NULL;
}

// Function to get the front element of the queue
int queueFront(struct Queue* q) {
    if (isQueueEmpty(q)) {
        return -1; // Indicating the queue is empty
    }
    return q->front->data;
}

// Define the stack structure using two queues
struct Stack {
    struct Queue* queue1;
    struct Queue* queue2;
};

// Function to create a stack
struct Stack* createStack() {
    struct Stack* stack = (struct Stack*)malloc(sizeof(struct Stack));
    stack->queue1 = createQueue();
    stack->queue2 = createQueue();
    return stack;
}

// Push operation (O(1))
void push(struct Stack* stack, int data) {
    enqueue(stack->queue1, data);
    printf("Pushed %d onto the stack.\n", data);
}

// Pop operation (O(n))
int pop(struct Stack* stack) {
    if (isQueueEmpty(stack->queue1)) {
        printf("Stack underflow! Cannot pop from an empty stack.\n");
        return -1;
    }

    // Transfer elements from queue1 to queue2 except the last one
    while (stack->queue1->front->next != NULL) {
        enqueue(stack->queue2, dequeue(stack->queue1));
    }

    // The last dequeued element is the top of the stack
    int poppedData = dequeue(stack->queue1);

    // Swap queue1 and queue2
    struct Queue* temp = stack->queue1;
    stack->queue1 = stack->queue2;
    stack->queue2 = temp;

    printf("Popped %d from the stack.\n", poppedData);
    return poppedData;
}

// Function to display the stack
void displayStack(struct Stack* stack) {
    if (isQueueEmpty(stack->queue1)) {
        printf("The stack is empty.\n");
        return;
    }

    struct QueueNode* temp = stack->queue1->front;
    printf("Stack elements: ");
    while (temp != NULL) {
        printf("%d ", temp->data);
        temp = temp->next;
    }
    printf("\n");
}

// Main function
int main() {
    struct Stack* stack = createStack();
    int choice, value;

    printf("Stack Using Two Queues:\n");
    while (1) {
        printf("\nMenu:\n");
        printf("1. Push\n");
        printf("2. Pop\n");
        printf("3. Display Stack\n");
        printf("4. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("Enter the value to push: ");
                scanf("%d", &value);
                push(stack, value);
                break;
            case 2:
                pop(stack);
                break;
            case 3:
                displayStack(stack);
                break;
            case 4:
                printf("Exiting...\n");
                exit(0);
            default:
                printf("Invalid choice! Please try again.\n");
        }
    }

    return 0;
}
