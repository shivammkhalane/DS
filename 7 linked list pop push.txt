7 linked list pop push 

#include <stdio.h>
#include <stdlib.h>

// Define the structure of a stack node
struct Node {
    int data;
    struct Node* next;
};

// Function to create a new node
struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}

// Push operation: Adds an element to the top of the stack
void push(struct Node** top, int data) {
    struct Node* newNode = createNode(data);
    newNode->next = *top; // Link the new node to the current top
    *top = newNode;       // Update the top to the new node
    printf("Pushed %d onto the stack.\n", data);
}

// Pop operation: Removes and returns the top element from the stack
int pop(struct Node** top) {
    if (*top == NULL) {
        printf("Stack underflow! Cannot pop from an empty stack.\n");
        return -1; // Indicating an error
    }
    struct Node* temp = *top;
    int poppedData = temp->data;
    *top = (*top)->next;  // Update the top to the next node
    free(temp);           // Free the memory of the popped node
    printf("Popped %d from the stack.\n", poppedData);
    return poppedData;
}

// Peek operation: Returns the top element without removing it
int peek(struct Node* top) {
    if (top == NULL) {
        printf("Stack is empty!\n");
        return -1; // Indicating an error
    }
    return top->data;
}

// Function to display the stack
void display(struct Node* top) {
    if (top == NULL) {
        printf("Stack is empty!\n");
        return;
    }
    printf("Stack elements:\n");
    while (top != NULL) {
        printf("%d -> ", top->data);
        top = top->next;
    }
    printf("NULL\n");
}

// Main function
int main() {
    struct Node* stack = NULL; // Initialize an empty stack
    int choice, value;

    printf("Stack Operations using Linked List:\n");
    while (1) {
        printf("\nMenu:\n");
        printf("1. Push\n");
        printf("2. Pop\n");
        printf("3. Peek\n");
        printf("4. Display\n");
        printf("5. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("Enter the value to push: ");
                scanf("%d", &value);
                push(&stack, value);
                break;
            case 2:
                pop(&stack);
                break;
            case 3:
                value = peek(stack);
                if (value != -1) {
                    printf("Top element is: %d\n", value);
                }
                break;
            case 4:
                display(stack);
                break;
            case 5:
                printf("Exiting...\n");
                exit(0);
            default:
                printf("Invalid choice! Please try again.\n");
        }
    }

    return 0;
}
