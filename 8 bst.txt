8 binary search tree 

#include <stdio.h>
#include <stdlib.h>

// Define the structure for a tree node
struct Node {
    int key;
    struct Node *left, *right;
};

// Function to create a new node
struct Node* createNode(int key) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->key = key;
    newNode->left = newNode->right = NULL;
    return newNode;
}

// Function to insert a key into the BST
struct Node* insert(struct Node* root, int key) {
    if (root == NULL) {
        return createNode(key);
    }
    if (key < root->key) {
        root->left = insert(root->left, key);
    } else if (key > root->key) {
        root->right = insert(root->right, key);
    }
    return root;
}

// Function to find the minimum key in the BST
struct Node* findMin(struct Node* root) {
    while (root && root->left != NULL) {
        root = root->left;
    }
    return root;
}

// Function to find the maximum key in the BST
struct Node* findMax(struct Node* root) {
    while (root && root->right != NULL) {
        root = root->right;
    }
    return root;
}

// Function to search for a key in the BST
struct Node* search(struct Node* root, int key) {
    if (root == NULL || root->key == key) {
        return root;
    }
    if (key < root->key) {
        return search(root->left, key);
    }
    return search(root->right, key);
}

// In-order traversal to display the BST
void inOrderTraversal(struct Node* root) {
    if (root != NULL) {
        inOrderTraversal(root->left);
        printf("%d ", root->key);
        inOrderTraversal(root->right);
    }
}

// Main function
int main() {
    struct Node* root = NULL;
    int choice, key;

    printf("Binary Search Tree Operations:\n");
    while (1) {
        printf("\nMenu:\n");
        printf("1. Insert Key\n");
        printf("2. Display BST (In-order Traversal)\n");
        printf("3. Find Minimum Key\n");
        printf("4. Find Maximum Key\n");
        printf("5. Search Key\n");
        printf("6. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("Enter the key to insert: ");
                scanf("%d", &key);
                root = insert(root, key);
                break;
            case 2:
                printf("BST (In-order): ");
                inOrderTraversal(root);
                printf("\n");
                break;
            case 3:
                if (root == NULL) {
                    printf("The tree is empty.\n");
                } else {
                    struct Node* minNode = findMin(root);
                    printf("Minimum key: %d\n", minNode->key);
                }
                break;
            case 4:
                if (root == NULL) {
                    printf("The tree is empty.\n");
                } else {
                    struct Node* maxNode = findMax(root);
                    printf("Maximum key: %d\n", maxNode->key);
                }
                break;
            case 5:
                printf("Enter the key to search: ");
                scanf("%d", &key);
                struct Node* searchNode = search(root, key);
                if (searchNode != NULL) {
                    printf("Key %d found in the BST.\n", key);
                } else {
                    printf("Key %d not found in the BST.\n", key);
                }
                break;
            case 6:
                printf("Exiting...\n");
                exit(0);
            default:
                printf("Invalid choice! Please try again.\n");
        }
    }

    return 0;
}
